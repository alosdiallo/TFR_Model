}
bTrain = sample(1:nrow(model),round(0.7*nrow(model)))
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
# logistic regression:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
tmpVals <- summPreds(glmTrain$fitted.values+1,as.factor(Train$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Train"),type="LR",metric=names(tmpVals),value=tmpVals))
}
}
p = NULL
p = ggplot(dfTmp,aes(x=type,y=100*value,colour = type)) + geom_boxplot(fill="white") + geom_point() + facet_wrap(~resample+metric,ncol=4,scales="free") + xlab("") + ylab("") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_bw()
p
resample
dftemp$resample
library(grid)
library(corrplot)
library(caret)
library(e1071)
library(ROCR)
library(ggplot2)
library(GGally)
library(PerformanceAnalytics)
library(factoextra)
library(corrplot)
library(Rtsne)
library(FactoMineR)
library(ggplot2)
library(factoextra)
library(survminer)
library(ggcorrplot)
library(readr)
library(circlize)
library(readxl)
library(stringr)
library(reshape)
library(psych)
library(ComplexHeatmap)
library(ggpubr)
library(readr)
library(gridExtra)
library(cowplot)
library(MASS)
library(fitdistrplus)
#BiocManager::install("preprocessCore")
library(preprocessCore)
library(MASS)
library(class)
library(ggplot2)
library(reshape2)
library(ROCR)
library(e1071)
library(GGally)
library(klaR)
library(randomForest)
summPreds <- function(inpPred,inpTruth,inpMetrNms=c("err","acc","sens","spec")) {
retVals <- numeric()
for ( metrTmp in inpMetrNms ) {
retVals[metrTmp] <- performance(prediction(inpPred,inpTruth),measure=metrTmp)@y.values[[1]][2]
}
retVals
}
model = NULL
library(here)
here("/Data/Training_Test_Set.xlsx")
getwd()
library(readxl)
model <- read_excel("C:/Users/Alos Diallo/Documents/GitHub/TFR_Model/Data/Training_Test_Set.xlsx")
library(tidyverse)
model %>% select_if(negate(is.numeric))
dim(model)
size = ncol(model) -1
multi.hist(model[,2:size])
dfTmpLR <- NULL
dfTmpRF <- NULL
dfTmpNB <- NULL
dfTmpLDA <- NULL
dfTmpSVM <- NULL
dfTmp = NULL
svmTuneRes = NULL
Train = NULL
Test = NULL
dfTmpKNN = NULL
for ( iResample in 1:2 ) {
for ( iSim in 1:10 ) {
bTrain = sample(1:nrow(model),round(0.7*nrow(model)))
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
if ( iResample == 2 ) {
bTrain = sample(1:nrow(model),round(0.7*nrow(model)))
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
}
# logistic regression:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
glmTestPred <- predict(glmTrain, newdata=Test[,2:size], type="response") > 0.5
tmpVals <- summPreds(as.numeric(glmTestPred)+1,as.factor(Test$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Validation","Bootstrap")[iResample],type="LR",metric=names(tmpVals),value=tmpVals))
dfTmpLR <- rbind(dfTmpLR,data.frame(resample=c("Validation","Bootstrap")[iResample],type="LR",metric=names(tmpVals),value=tmpVals))
#RF
Y = factor(as.numeric(as.factor(Train$cat)))
rfTmp <- randomForest(Y~.,data=Train[,2:size],mTry = 10)
rfTestPred <- predict(rfTmp,newdata=Test)
mseTest <- mean((as.numeric(factor(Test$cat))-as.numeric(rfTestPred))) #Calculating the mean squared error
tmpVals <- summPreds(as.numeric(factor(Test$cat)),as.numeric(rfTestPred))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Validation","Bootstrap")[iResample],type="RF",metric=names(tmpVals),value=tmpVals))
dfTmpRF <- rbind(dfTmpRF,data.frame(resample=c("Validation","Bootstrap")[iResample],type="RF",metric=names(tmpVals),value=tmpVals))
# LDA:
ldaTrain <- lda(Train$cat~.,data=Train[,2:size])
ldaTestPred <- predict(ldaTrain, newdata=Test[,2:size])
tmpVals <- summPreds(as.numeric(ldaTestPred$class),as.factor(Test$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Validation","Bootstrap")[iResample],type="LDA",metric=names(tmpVals),value=tmpVals))
dfTmpLDA <- rbind(dfTmpLDA,data.frame(resample=c("Validation","Bootstrap")[iResample],type="LDA",metric=names(tmpVals),value=tmpVals))
# NB:
Y = factor(as.numeric(as.factor(Train$cat)))
nbTrain <- naiveBayes(Y~.,data=Train[,2:size])
nbTestPred = predict(nbTrain, newdata=Test[,2:size])
tmpVals = summPreds(as.numeric(nbTestPred),as.numeric(as.factor(Test$cat)))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Validation","Bootstrap")[iResample],type="NB",metric=names(tmpVals),value=tmpVals))
dfTmpNB <- rbind(dfTmpNB,data.frame(resample=c("Validation","Bootstrap")[iResample],type="NB",metric=names(tmpVals),value=tmpVals))
#SVM
svmResult = svm(Train$cat~.,data=Train[,2:size],kernel="radial",cost=20,gamma = .1)
svmTestPred = predict(svmResult, newdata=Test[,2:size])
tmpVals = summPreds(predict(svmResult,newdata=Test[,2:size]),Test$cat)
dfTmp <- rbind(dfTmp,data.frame(resample=c("Validation","Bootstrap")[iResample],type="SVM",metric=names(tmpVals),value=tmpVals))
dfTmpSVM <- rbind(dfTmpSVM,data.frame(resample=c("Validation","Bootstrap")[iResample],type="SVM",metric=names(tmpVals),value=tmpVals))
# KNN:
for ( kTmp in c(10,20,150,300) ) {
knnTestPred <- knn(Train[,2:size],Test[,2:size],Train$cat,k=kTmp)
tmpVals <- summPreds(as.numeric(knnTestPred),as.numeric(Test$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Validation","Bootstrap")[iResample],type="KNN",metric=names(tmpVals),value=tmpVals))
dfTmpKNN <- rbind(dfTmpKNN,data.frame(resample=c("Validation","Bootstrap")[iResample],type="KNN",metric=names(tmpVals),value=tmpVals))
}
}
}
p = NULL
p = ggplot(dfTmp,aes(x=type,y=100*value,colour = type)) + geom_boxplot(fill="white") + geom_point() + facet_wrap(~resample+metric,ncol=4,scales="free") + xlab("") + ylab("") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_bw()
p
dfTmpLR <- NULL
dfTmpLR_train <- NULL
dfTmpRF <- NULL
dfTmpNB <- NULL
dfTmpLDA <- NULL
dfTmpSVM <- NULL
dfTmp = NULL
svmTuneRes = NULL
Train = NULL
Test = NULL
dfTmpKNN = NULL
for ( iResample in 1:2 ) {
for ( iSim in 1:100 ) {
if ( iResample == 2 ) {
bTrain = sample(1:nrow(model),round(0.7*nrow(model)))
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
# logistic regression:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
glmTestPred <- predict(glmTrain, newdata=Test[,2:size], type="response") > 0.5
tmpVals <- summPreds(as.numeric(glmTestPred)+1,as.factor(Test$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Test"),type="LR",metric=names(tmpVals),value=tmpVals))
}
bTrain = sample(1:nrow(model),round(0.7*nrow(model)))
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
# logistic regression:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
tmpVals <- summPreds(glmTrain$fitted.values+1,as.factor(Train$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Train"),type="LR",metric=names(tmpVals),value=tmpVals))
}
}
p = NULL
p = ggplot(dfTmp,aes(x=type,y=100*value,colour = type)) + geom_boxplot(fill="white") + geom_point() + facet_wrap(~resample+metric,ncol=4,scales="free") + xlab("") + ylab("") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_bw()
p
dfTmpLR <- NULL
dfTmpLR_train <- NULL
dfTmpRF <- NULL
dfTmpNB <- NULL
dfTmpLDA <- NULL
dfTmpSVM <- NULL
dfTmp = NULL
svmTuneRes = NULL
Train = NULL
Test = NULL
dfTmpKNN = NULL
bTrain = sample(1:nrow(model),round(0.7*nrow(model)))
for ( iResample in 1:2 ) {
for ( iSim in 1:100 ) {
if ( iResample == 2 ) {
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
# logistic regression:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
glmTestPred <- predict(glmTrain, newdata=Test[,2:size], type="response") > 0.5
tmpVals <- summPreds(as.numeric(glmTestPred)+1,as.factor(Test$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Test"),type="LR",metric=names(tmpVals),value=tmpVals))
}
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
# logistic regression:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
tmpVals <- summPreds(glmTrain$fitted.values+1,as.factor(Train$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Train"),type="LR",metric=names(tmpVals),value=tmpVals))
}
}
p = NULL
p = ggplot(dfTmp,aes(x=type,y=100*value,colour = type)) + geom_boxplot(fill="white") + geom_point() + facet_wrap(~resample+metric,ncol=4,scales="free") + xlab("") + ylab("") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_bw()
p
dfTmpLR <- NULL
dfTmpLR_train <- NULL
dfTmpRF <- NULL
dfTmpNB <- NULL
dfTmpLDA <- NULL
dfTmpSVM <- NULL
dfTmp = NULL
svmTuneRes = NULL
Train = NULL
Test = NULL
dfTmpKNN = NULL
for ( iResample in 1:2 ) {
for ( iSim in 1:100 ) {
bTrain = sample(1:nrow(model),round(0.7*nrow(model)))
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
if ( iResample == 2 ) {
# logistic regression:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
glmTestPred <- predict(glmTrain, newdata=Test[,2:size], type="response") > 0.5
tmpVals <- summPreds(as.numeric(glmTestPred)+1,as.factor(Test$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Test"),type="LR",metric=names(tmpVals),value=tmpVals))
}
# logistic regression:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
tmpVals <- summPreds(glmTrain$fitted.values+1,as.factor(Train$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Train"),type="LR",metric=names(tmpVals),value=tmpVals))
}
}
p = NULL
p = ggplot(dfTmp,aes(x=type,y=100*value,colour = type)) + geom_boxplot(fill="white") + geom_point() + facet_wrap(~resample+metric,ncol=4,scales="free") + xlab("") + ylab("") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_bw()
p
dfTmpLR <- NULL
dfTmpLR_train <- NULL
dfTmpRF <- NULL
dfTmpNB <- NULL
dfTmpLDA <- NULL
dfTmpSVM <- NULL
dfTmp = NULL
svmTuneRes = NULL
Train = NULL
Test = NULL
dfTmpKNN = NULL
for ( iSim in 1:100 ) {
bTrain = sample(1:nrow(model),round(0.7*nrow(model)))
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
# logistic regression:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
glmTestPred <- predict(glmTrain, newdata=Test[,2:size], type="response") > 0.5
tmpVals <- summPreds(as.numeric(glmTestPred)+1,as.factor(Test$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Test"),type="LR",metric=names(tmpVals),value=tmpVals))
# logistic regression:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
tmpVals <- summPreds(glmTrain$fitted.values+1,as.factor(Train$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Train"),type="LR",metric=names(tmpVals),value=tmpVals))
}
p = NULL
p = ggplot(dfTmp,aes(x=type,y=100*value,colour = type)) + geom_boxplot(fill="white") + geom_point() + facet_wrap(~resample+metric,ncol=4,scales="free") + xlab("") + ylab("") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_bw()
p
glmTrain$fitted.values
glmTrain$fitted.values+1
clear
glmTrain$fitted.values+1
table(glmTrain$fitted.values+1,Train$cat)
dfTmpLR <- NULL
dfTmpLR_train <- NULL
dfTmpRF <- NULL
dfTmpNB <- NULL
dfTmpLDA <- NULL
dfTmpSVM <- NULL
dfTmp = NULL
svmTuneRes = NULL
Train = NULL
Test = NULL
dfTmpKNN = NULL
for ( iSim in 1:100 ) {
bTrain = sample(1:nrow(model),round(0.7*nrow(model)))
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
glmTestPred <- predict(glmTrain, newdata=Test[,2:size], type="response") > 0.5
tmpVals <- summPreds(as.numeric(glmTestPred)+1,as.factor(Test$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Validation","Bootstrap"),type="LR",metric=names(tmpVals),value=tmpVals))
dfTmpLR <- rbind(dfTmpLR,data.frame(resample=c("Validation","Bootstrap")[iResample],type="LR",metric=names(tmpVals),value=tmpVals))
}
dfTmpLR <- NULL
dfTmpLR_train <- NULL
dfTmpRF <- NULL
dfTmpNB <- NULL
dfTmpLDA <- NULL
dfTmpSVM <- NULL
dfTmp = NULL
svmTuneRes = NULL
Train = NULL
Test = NULL
dfTmpKNN = NULL
for ( iSim in 1:100 ) {
bTrain = sample(1:nrow(model),round(0.7*nrow(model)))
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
glmTestPred <- predict(glmTrain, newdata=Test[,2:size], type="response") > 0.5
tmpVals <- summPreds(as.numeric(glmTestPred)+1,as.factor(Test$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Validation","Bootstrap"),type="LR",metric=names(tmpVals),value=tmpVals))
dfTmpLR <- rbind(dfTmpLR,data.frame(resample=c("Validation","Bootstrap"),type="LR",metric=names(tmpVals),value=tmpVals))
}
p = NULL
p = ggplot(dfTmp,aes(x=type,y=100*value,colour = type)) + geom_boxplot(fill="white") + geom_point() + facet_wrap(~resample+metric,ncol=4,scales="free") + xlab("") + ylab("") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_bw()
p
dfTmpLR <- NULL
dfTmpLR_train <- NULL
dfTmpRF <- NULL
dfTmpNB <- NULL
dfTmpLDA <- NULL
dfTmpSVM <- NULL
dfTmp = NULL
svmTuneRes = NULL
Train = NULL
Test = NULL
dfTmpKNN = NULL
for ( iSim in 1:100 ) {
bTrain = sample(1:nrow(model),round(0.7*nrow(model)))
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
# logistic regression Test error:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
glmTestPred <- predict(glmTrain, newdata=Test[,2:size], type="response") > 0.5
tmpVals <- summPreds(as.numeric(glmTestPred)+1,as.factor(Test$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Test"),type="LR",metric=names(tmpVals),value=tmpVals))
# logistic regression Training Error:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
tmpVals <- summPreds(glmTrain$fitted.values+1,as.factor(Train$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Train"),type="LR",metric=names(tmpVals),value=tmpVals))
}
p = NULL
p = ggplot(dfTmp,aes(x=type,y=100*value,colour = type)) + geom_boxplot(fill="white") + geom_point() + facet_wrap(~resample+metric,ncol=4,scales="free") + xlab("") + ylab("") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_bw()
p
dfTmpLR <- NULL
dfTmpRF <- NULL
dfTmpNB <- NULL
dfTmpLDA <- NULL
dfTmpSVM <- NULL
dfTmp = NULL
svmTuneRes = NULL
Train = NULL
Test = NULL
dfTmpKNN = NULL
bTrain = sample(1:nrow(model),round(0.7*nrow(model)))
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
# LDA:
ldaTrain <- lda(Train$cat~.,data=Train[,2:size])
ldaTestPred <- predict(ldaTrain, newdata=Test[,2:size])
tmpVals <- summPreds(as.numeric(ldaTestPred$class),as.factor(Test$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Bootstrap"),type="LDA",metric=names(tmpVals),value=tmpVals))
dfTmpLDA <- rbind(dfTmpLDA,data.frame(resample=c("Bootstrap"),type="LDA",metric=names(tmpVals),value=tmpVals))
ldaTrain
ldaTrain$counts
ldaTrain$N
ldaTrain$call
ldaTrain$xlevels
ldaTrain$means
?lda
ldaTrain <- lda(Train$cat~.,data=Train[,2:size],cv = TRUE)
ldaTrain
dfTmpLR <- NULL
dfTmpRF <- NULL
dfTmpNB <- NULL
dfTmpLDA <- NULL
dfTmpSVM <- NULL
dfTmp = NULL
svmTuneRes = NULL
Train = NULL
Test = NULL
dfTmpKNN = NULL
bTrain = sample(1:nrow(model),round(0.7*nrow(model)))
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
# LDA:
ldaTrain <- lda(Train$cat~.,data=Train[,2:size],cv = TRUE)
ldaTestPred <- predict(ldaTrain, newdata=Train[,2:size])
tmpVals <- summPreds(as.numeric(ldaTestPred$class),as.factor(Train$cat))
tmpVals
dfTmpLR <- NULL
dfTmpLR_train <- NULL
dfTmpRF <- NULL
dfTmpNB <- NULL
dfTmpLDA <- NULL
dfTmpSVM <- NULL
dfTmp = NULL
svmTuneRes = NULL
Train = NULL
Test = NULL
dfTmpKNN = NULL
for ( iSim in 1:100 ) {
bTrain = sample(1:nrow(model),round(0.7*nrow(model)))
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
# logistic regression Test error:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
glmTestPred <- predict(glmTrain, newdata=Test[,2:size], type="response") > 0.5
tmpVals <- summPreds(as.numeric(glmTestPred)+1,as.factor(Test$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Test"),type="LR",metric=names(tmpVals),value=tmpVals))
# logistic regression Training Error:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
tmpVals <- summPreds(glmTrain$fitted.values+1,as.factor(Train$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Train"),type="LR",metric=names(tmpVals),value=tmpVals))
# LDA Training Error:
ldaTrain <- lda(Train$cat~.,data=Train[,2:size],cv = TRUE)
ldaTestPred <- predict(ldaTrain, newdata=Train[,2:size])
tmpVals <- summPreds(as.numeric(ldaTestPred$class),as.factor(Train$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Train"),type="LDA",metric=names(tmpVals),value=tmpVals))
# LDA Test Error:
ldaTrain <- lda(Train$cat~.,data=Train[,2:size])
ldaTestPred <- predict(ldaTrain, newdata=Test[,2:size])
tmpVals <- summPreds(as.numeric(ldaTestPred$class),as.factor(Test$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Test"),type="LDA",type="LDA",metric=names(tmpVals),value=tmpVals))
}
dfTmpLR <- NULL
dfTmpLR_train <- NULL
dfTmpRF <- NULL
dfTmpNB <- NULL
dfTmpLDA <- NULL
dfTmpSVM <- NULL
dfTmp = NULL
svmTuneRes = NULL
Train = NULL
Test = NULL
dfTmpKNN = NULL
for ( iSim in 1:100 ) {
bTrain = sample(1:nrow(model),round(0.7*nrow(model)))
Train <- model[bTrain,]
Test <- model[-bTrain,]
Test = as.data.frame(Test)
Train$cat = as.numeric(as.factor(Train$cat))
Test$cat = as.numeric(as.factor(Test$cat))
# logistic regression Test error:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
glmTestPred <- predict(glmTrain, newdata=Test[,2:size], type="response") > 0.5
tmpVals <- summPreds(as.numeric(glmTestPred)+1,as.factor(Test$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Test"),type="LR",metric=names(tmpVals),value=tmpVals))
# logistic regression Training Error:
glmTrain <- glm(as.factor(Train$cat)~.,data=Train[,2:size],family=binomial)
tmpVals <- summPreds(glmTrain$fitted.values+1,as.factor(Train$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Train"),type="LR",metric=names(tmpVals),value=tmpVals))
# LDA Training Error:
ldaTrain <- lda(Train$cat~.,data=Train[,2:size],cv = TRUE)
ldaTestPred <- predict(ldaTrain, newdata=Train[,2:size])
tmpVals <- summPreds(as.numeric(ldaTestPred$class),as.factor(Train$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Train"),type="LDA",metric=names(tmpVals),value=tmpVals))
# LDA Test Error:
ldaTrain <- lda(Train$cat~.,data=Train[,2:size])
ldaTestPred <- predict(ldaTrain, newdata=Test[,2:size])
tmpVals <- summPreds(as.numeric(ldaTestPred$class),as.factor(Test$cat))
dfTmp <- rbind(dfTmp,data.frame(resample=c("Test"),type="LDA",metric=names(tmpVals),value=tmpVals))
}
p = NULL
p = ggplot(dfTmp,aes(x=type,y=100*value,colour = type)) + geom_boxplot(fill="white") + geom_point() + facet_wrap(~resample+metric,ncol=4,scales="free") + xlab("") + ylab("") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_bw()
p
